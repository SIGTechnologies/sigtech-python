name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  release:
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    environment:
      name: release
    env:
      GIT_COMMITTER_NAME: "sig-autobot"
      GIT_COMMITTER_EMAIL: "autobot@sigtech.com"
    steps:
      - id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.SIGTECH_PYTHON_APP_ID }}
          private_key: ${{ secrets.SIGTECH_PYTHON_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}
      - name: "Check commit messages match angular style"
        run: |
          ! git log origin/master..HEAD  --pretty=format:%s | \
            grep -v -E '^(build|chore|ci|docs|feat|fix|perf|style|refactor|test):'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: '.lockfiles/tools.txt'
      - run: pip install --no-dependencies -r .lockfiles/tools.txt
      - run: make release
      - run: echo "RELEASE_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        id: release_sha
    outputs:
      release_sha: ${{ steps.release_sha.outputs.RELEASE_SHA }}

  build:
    runs-on: ubuntu-22.04
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') }}
    needs: [release]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: '${{ needs.release.outputs.release_sha || github.event.pull_request.head.sha }}'
      - name: "Check commit messages match angular style"
        run: |
          ! git log origin/master..HEAD  --pretty=format:%s | \
            grep -v -E '^(build|chore|ci|docs|feat|fix|perf|style|refactor|test):'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: '.lockfiles/tools.txt'
      - run: pip install --no-dependencies -r .lockfiles/tools.txt
      - run: make lint
      - run: make build
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/sigtech-*.whl
            dist/sigtech-*.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          name: tests
          path: |
            tests/
            examples/
            README.md
      - run: echo "SOURCE_FILENAME=$(basename sigtech-*.tar.gz)" >> $GITHUB_OUTPUT
        id: source_filename
        working-directory: dist
      - run: echo "WHEEL_FILENAME=$(basename sigtech-*.whl)" >> $GITHUB_OUTPUT
        id: wheel_filename
        working-directory: dist
    outputs:
      source_filename: ${{ steps.source_filename.outputs.SOURCE_FILENAME }}
      wheel_filename: ${{ steps.wheel_filename.outputs.WHEEL_FILENAME }}

  test:
    needs: [build]
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') }}
    env:
      SIGTECH_API_KEY: ${{ secrets.SIGTECH_API_KEY }}
    strategy:
      matrix:
        include:
          - os: 'ubuntu-20.04'
            python: '3.6'
            pandas: '1.0.5'
          - os: 'ubuntu-20.04'
            python: '3.7'
            pandas: '1.0.5'
          - os: 'ubuntu-22.04'
            python: '3.8'
            pandas: '1.4.1'
          - os: 'ubuntu-22.04'
            python: '3.9'
            pandas: '1.4.1'
          - os: 'ubuntu-22.04'
            python: '3.9'
            pandas: '2.0.3'
          - os: 'ubuntu-22.04'
            python: '3.10'
            pandas: '2.0.3'
          - os: 'ubuntu-22.04'
            python: '3.11'
            pandas: '2.0.3'
          - os: 'windows-latest'
            python: '3.11'
            pandas: '2.0.3'
          - os: 'macos-latest'
            python: '3.11'
            pandas: '2.0.3'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v4
        with:
            python-version: '${{ matrix.python }}'
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - run: 'pip install pandas==${{ matrix.pandas }}'
      - working-directory: dist
        run: "pip install ${{needs.build.outputs.wheel_filename}}[test]"
      - uses: actions/download-artifact@v3
        with:
          name: tests
          path: tests
      - run: pytest .
        working-directory: tests

  pypi-publish:
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-22.04
    needs: [ test ]
    environment:
      name: pypi
      url: https://pypi.org/project/sigtech/
    permissions:
      id-token: write
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    # TMP!!!
    #- name: Publish package distributions to PyPI
    #  uses: pypa/gh-action-pypi-publish@v1.8.8
    #  with:
    #    packages-dir: dist/
    #    verbose: true
    #    print-hash: true

  pypi-test:
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-22.04
    needs: [ pypi-publish ]
    env:
      SIGTECH_API_KEY: ${{ secrets.SIGTECH_API_KEY }}
    steps:
    - run: pip install sigtech
    - uses: actions/download-artifact@v3
      with:
        name: tests
        path: tests
    - run: cd examples && for f in *.py; do python "$f"; done
      working-directory: tests